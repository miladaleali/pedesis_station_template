version: '3.8'

services:

    redis_memory:
        image: redis:alpine
        ports:
            - "6379:6379"
        healthcheck:
          test: redis-cli ping
          interval: 10s
          timeout: 5s
          retries: 3
        restart: always

    rabbitmq:
        image: rabbitmq
        ports:
            - "5672:5672"
            - "15672:15672"
        healthcheck:
          test: rabbitmq-diagnostics -q ping
          interval: 10s
          timeout: 5s
          retries: 3
        restart: always

    db:
        image: postgres:15.1-alpine
        ports:
            - "5432:5432"
        env_file:
            - .env
        environment:
            - PGDATA=/var/lib/postgresql/data/pgdata
        volumes:
            - ./data:/var/lib/postgresql/data/pgdata
        healthcheck:
            test: ["CMD-SHELL", "pg_isready"]
            interval: 10s
            timeout: 5s
            retries: 5
        restart: on-failure

    pgadmin:
        image: dpage/pgadmin4
        depends_on:
            db:
              condition: service_healthy
        env_file:
            - .env
        ports:
            - "5050:80"

    backend:
        build:
            context: ./backend
            dockerfile: backend.dockerfile
            target: prod
            args:
              GIT_TOKEN_PEDESIS: $GIT_TOKEN_PEDESIS
        depends_on:
            celery:
              condition: service_healthy
        env_file:
            - .env
        environment:
            - REDIS_HOST=redis_memory
            - RABBITMQ_HOST=rabbitmq
            - POSTGRES_HOST=db
        volumes:
            - ./backend/app:/app
        ports:  
            - 5678:5678
        restart: on-failure

    celery:
        build:
            context: ./backend
            dockerfile: celeryworker.dockerfile
            target: prod
            args:
              GIT_TOKEN_PEDESIS: $GIT_TOKEN_PEDESIS
        depends_on:
            redis_memory:
              condition: service_healthy
            rabbitmq:
              condition: service_healthy
            db:
              condition: service_healthy
        env_file:
            - .env
        environment:
            - REDIS_HOST=redis_memory
            - RABBITMQ_HOST=rabbitmq
            - POSTGRES_HOST=db
            - C_FORCE_ROOT=true
            - CELERY_BROKER_URL=amqp://rabbitmq:5672
            - CELERY_RESULT_BACKEND=redis://redis_memory:6379/1
        ports:
            - 5679:5679
        healthcheck:
          test: celery -A pedesis.tasks_manager:manager inspect ping
          interval: 30s
          timeout: 10s
          retries: 5
        restart: always

    flower:
      build:
          context: ./backend
          dockerfile: celeryworker.dockerfile
          target: flower
          args:
            GIT_TOKEN_PEDESIS: $GIT_TOKEN_PEDESIS
            FLOWER_PORT: 8888
      env_file:
          - .env
      environment:
          - CELERY_BROKER_URL="amqp://rabbitmq:5672"
          - CELERY_BROKER_TRANSPORT_URL="amqp://rabbitmq:5672"
          - CELERY_RESULT_BACKEND="redis://redis_memory:6379/1"
          - C_FORCE_ROOT=true
      depends_on:
          celery:
            condition: service_healthy
      ports:
        - 8888:8888
      volumes:
        - flower-data:/data
      command: celery -A pedesis.tasks_manager:manager --broker=amqp://rabbitmq:5672 flower --persisten=True --port=8888

    prometheus:
      image: prom/prometheus
      restart: always
      volumes:
        - ./prometheus:/etc/prometheus/
        - prometheus_data:/prometheus
      command:
        - '--config.file=/etc/prometheus/prometheus.yml'
        - '--storage.tsdb.path=/prometheus'
        - '--web.console.libraries=/usr/share/prometheus/console_libraries'
        - '--web.console.templates=/usr/share/prometheus/consoles'
      ports:
        - 9090:9090
      links:
        - cadvisor:cadvisor
        - alertmanager:alertmanager
      depends_on:
        - cadvisor

    node-exporter:
      image: prom/node-exporter
      volumes:
        - /proc:/host/proc:ro
        - /sys:/host/sys:ro
        - /:/rootfs:ro
      command:
        - '--path.procfs=/host/proc'
        - '--path.sysfs=/host/sys'
        - --collector.filesystem.ignored-mount-points
        - '^/(sys|proc|dev|host|etc|rootfs/var/lib/docker/containers|rootfs/var/lib/docker/overlay2|rootfs/run/docker/netns|rootfs/var/lib/docker/aufs)($$|/)'
      ports:
        - 9100:9100
      restart: always
      deploy:
        mode: global

    alertmanager:
      image: prom/alertmanager
      restart: always
      ports:
        - 9093:9093
      volumes:
        - ./alertmanager/:/etc/alertmanager/
      command:
        - '--config.file=/etc/alertmanager/config.yml'
        - '--storage.path=/alertmanager'

    cadvisor:
      image: gcr.io/cadvisor/cadvisor
      volumes:
        - /:/rootfs:ro
        - /var/run:/var/run:rw
        - /sys:/sys:ro
        - /var/lib/docker/:/var/lib/docker:ro
      ports:
        - 8080:8080
      restart: always
      deploy:
        mode: global

    grafana:
      image: grafana/grafana
      user: '472'
      restart: always
      # environment:
      #   GF_INSTALL_PLUGINS: 'grafana-clock-panel,grafana-simple-json-datasource'
      volumes:
        - grafana_data:/var/lib/grafana
        - ./grafana/provisioning/:/etc/grafana/provisioning/
      env_file:
        - ./grafana/config.monitoring
      ports:
        - 3000:3000
      depends_on:
        - prometheus

    portainer:
      container_name: portainer
      image: portainer/portainer-ce:latest
      ports:
        - 9000:9000
        - 9443:9443
        - 8000:8000
      volumes:
        - /var/run/docker.sock:/var/run/docker.sock
        - portainer-data:/data
      restart: unless-stopped

volumes:
    data:
      driver: local
    flower-data:
      driver: local
    prometheus_data: {}
    grafana_data: {}
    portainer-data:
      driver: local
